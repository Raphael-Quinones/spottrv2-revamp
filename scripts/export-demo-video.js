#!/usr/bin/env node

/**
 * Export demo video data from Supabase
 * This script exports the video metadata and analysis data for the demo video
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '..', '.env.local') });

const DEMO_VIDEO_ID = '5ad94e04-3a6f-4104-ba81-45f36593e6ef';

// Initialize Supabase client with service role key to bypass RLS
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function exportDemoVideo() {
  console.log('üé¨ Exporting demo video data...\n');

  try {
    // 1. Fetch video record
    console.log('üìπ Fetching video record...');
    const { data: video, error: videoError } = await supabase
      .from('videos')
      .select('*')
      .eq('id', DEMO_VIDEO_ID)
      .single();

    if (videoError) {
      throw new Error(`Failed to fetch video: ${videoError.message}`);
    }

    console.log(`‚úÖ Found video: ${video.filename}`);
    console.log(`   Duration: ${video.duration_seconds}s`);
    console.log(`   Status: ${video.status}`);

    // 2. Fetch all video_analysis records
    console.log('\nüîç Fetching analysis records...');
    const { data: analyses, error: analysesError } = await supabase
      .from('video_analysis')
      .select('*')
      .eq('video_id', DEMO_VIDEO_ID)
      .order('timestamp');

    if (analysesError) {
      throw new Error(`Failed to fetch analyses: ${analysesError.message}`);
    }

    console.log(`‚úÖ Found ${analyses.length} analysis records`);

    // 3. Generate SQL for seed migration
    console.log('\nüíæ Generating seed SQL...');

    let sql = `-- Seed demo video data
-- Auto-generated by export-demo-video.js

-- Insert demo video record
INSERT INTO videos (
  id, user_id, filename, url, file_size, duration_seconds,
  status, accuracy_level, analysis_scope, frame_interval,
  progress, is_demo, created_at, updated_at, processed_at
) VALUES (
  '${DEMO_VIDEO_ID}',
  '00000000-0000-0000-0000-000000000000', -- System user ID for demos
  '${video.filename}',
  '/demo-videos/demo-dashcam.mp4', -- Local public path
  ${video.file_size || 'NULL'},
  ${video.duration_seconds || 'NULL'},
  'completed',
  '${video.accuracy_level}',
  '${video.analysis_scope.replace(/'/g, "''")}',
  ${video.frame_interval},
  100,
  true, -- Mark as demo
  NOW(),
  NOW(),
  NOW()
) ON CONFLICT (id) DO UPDATE SET
  is_demo = true,
  url = '/demo-videos/demo-dashcam.mp4';

-- Insert video analysis records
`;

    // Add each analysis record
    for (const analysis of analyses) {
      const analysisResult = JSON.stringify(analysis.analysis_result).replace(/'/g, "''");

      sql += `
INSERT INTO video_analysis (
  id, video_id, timestamp, frame_number, analysis_result, tokens_used, created_at
) VALUES (
  '${analysis.id}',
  '${DEMO_VIDEO_ID}',
  ${analysis.timestamp},
  ${analysis.frame_number},
  '${analysisResult}'::jsonb,
  ${analysis.tokens_used || 0},
  NOW()
) ON CONFLICT (id) DO NOTHING;
`;
    }

    // 4. Save SQL file
    const outputPath = path.join(__dirname, '..', 'supabase', 'migrations', '20250918000001_seed_demo_video.sql');
    await fs.writeFile(outputPath, sql);

    console.log(`‚úÖ Saved seed migration to: ${outputPath}`);

    // 5. Log video file info for manual copy
    console.log('\nüìÅ Video file location:');
    console.log(`   Source: /tmp/spottr-videos/${DEMO_VIDEO_ID}.mp4`);
    console.log(`   Destination: public/demo-videos/demo-dashcam.mp4`);
    console.log('\n‚ö†Ô∏è  Please manually copy the video file to the destination!');

  } catch (error) {
    console.error('‚ùå Export failed:', error.message);
    process.exit(1);
  }
}

// Run the export
exportDemoVideo();